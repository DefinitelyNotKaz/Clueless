import aiohttp
from aiohttp.client_exceptions import InvalidURL, ClientConnectionError


class BadResponseError(Exception):
    """Raised when response code isn't 200."""


async def get_content(url: str, content_type, **kwargs):
    """Send a GET request to the url and return the response as json or bytes.
    Raise BadResponseError or ValueError."""
    async with aiohttp.ClientSession(**kwargs) as session:
        try:
            async with session.get(url) as r:
                if r.status == 200:
                    if content_type == "json":
                        return await r.json()
                    if content_type == "bytes":
                        return await r.read()
                    if content_type == "image":
                        content_type = r.headers["content-type"]
                        if "image" not in content_type:
                            raise ValueError("The URL doesn't contain any image.")
                        else:
                            return await r.read()
                else:
                    raise BadResponseError(f"The URL leads to an error {r.status}")
        except (InvalidURL, ClientConnectionError):
            raise ValueError("The URL provided is invalid.")


def make_progress_bar(percentage, nb_char=20):
    full = "â€‹â–ˆ"
    empty = " "
    res_bar = ""
    bar_idx = int((percentage / 100) * nb_char)
    for i in range(nb_char):
        if i < bar_idx:
            res_bar += full
        else:
            res_bar += empty
    return res_bar


def ordinal(n):
    """Get a rank suffix (1 -> 1st, 2 -> 2nd, ...)"""
    return "%d%s" % (n, "tsnrhtdd"[(n // 10 % 10 != 1) * (n % 10 < 4) * n % 10 :: 4])


# mapping of languages (ISO 639-1) to country codes (ISO 3166-1) as emojis
# see https://wiki.openstreetmap.org/wiki/Nominatim/Country_Codes
LANG2FLAG = {
    "af": "ðŸ‡¿ðŸ‡¦",
    "sq": "ðŸ‡¦ðŸ‡±",
    "am": "ðŸ‡ªðŸ‡¹",
    "ar": "ðŸ‡©ðŸ‡¯",
    "hy": "ðŸ‡¦ðŸ‡²",
    "az": "ðŸ‡¦ðŸ‡¿",
    "eu": "ðŸ‡ªðŸ‡¸",
    "be": "ðŸ‡§ðŸ‡¾",
    "bn": "ðŸ‡§ðŸ‡©",
    "bs": "ðŸ‡§ðŸ‡¦",
    "bg": "ðŸ‡§ðŸ‡¬",
    "ca": "ðŸ‡¦ðŸ‡©",
    "ceb": "ðŸ‡µðŸ‡­",
    "ny": "ðŸ‡²ðŸ‡¼",
    "zh-cn": "ðŸ‡¨ðŸ‡³",
    "zh-tw": "ðŸ‡¨ðŸ‡³",
    "co": "ðŸ‡«ðŸ‡·",
    "hr": "ðŸ‡­ðŸ‡·",
    "cs": "ðŸ‡¨ðŸ‡¿",
    "da": "ðŸ‡©ðŸ‡°",
    "nl": "ðŸ‡³ðŸ‡±",
    "en": "ðŸ‡¬ðŸ‡§",
    "eo": None,
    "et": "ðŸ‡ªðŸ‡ª",
    "tl": "ðŸ‡µðŸ‡­",
    "fi": "ðŸ‡«ðŸ‡®",
    "fr": "ðŸ‡«ðŸ‡·",
    "fy": None,
    "gl": None,
    "ka": "ðŸ‡¬ðŸ‡ª",
    "de": "ðŸ‡©ðŸ‡ª",
    "el": "ðŸ‡¬ðŸ‡·",
    "gu": "ðŸ‡®ðŸ‡³",
    "ht": "ðŸ‡­ðŸ‡¹",
    "ha": "ðŸ‡­ðŸ‡¦",
    "haw": None,
    "iw": "ðŸ‡®ðŸ‡±",
    "he": "ðŸ‡®ðŸ‡±",
    "hi": "ðŸ‡®ðŸ‡³",
    "hmn": None,
    "hu": "ðŸ‡­ðŸ‡º",
    "is": "ðŸ‡®ðŸ‡¸",
    "ig": "ðŸ‡³ðŸ‡¬",
    "id": "ðŸ‡®ðŸ‡©",
    "ga": "ðŸ‡®ðŸ‡ª",
    "it": "ðŸ‡®ðŸ‡¹",
    "ja": "ðŸ‡¯ðŸ‡µ",
    "jw": None,
    "kn": None,
    "kk": "ðŸ‡°ðŸ‡¿",
    "km": "ðŸ‡°ðŸ‡­",
    "ko": "ðŸ‡°ðŸ‡·",
    "ku": "ðŸ‡®ðŸ‡¶",
    "ky": "ðŸ‡°ðŸ‡¬",
    "lo": "ðŸ‡±ðŸ‡¦",
    "la": "ðŸ‡»ðŸ‡¦",
    "lv": "ðŸ‡±ðŸ‡»",
    "lt": "ðŸ‡±ðŸ‡¹",
    "lb": "ðŸ‡±ðŸ‡º",
    "mk": "ðŸ‡²ðŸ‡°",
    "mg": "ðŸ‡²ðŸ‡¬",
    "ms": "ðŸ‡²ðŸ‡¾",
    "ml": None,
    "mt": "ðŸ‡²ðŸ‡¹",
    "mi": "ðŸ‡³ðŸ‡¿",
    "mr": None,
    "mn": "ðŸ‡²ðŸ‡³",
    "my": "ðŸ‡²ðŸ‡²",
    "ne": "ðŸ‡³ðŸ‡µ",
    "no": "ðŸ‡³ðŸ‡´",
    "or": None,
    "ps": "ðŸ‡¦ðŸ‡«",
    "fa": "ðŸ‡®ðŸ‡·",
    "pl": "ðŸ‡µðŸ‡±",
    "pt": "ðŸ‡µðŸ‡¹",
    "pa": "ðŸ‡®ðŸ‡³",
    "ro": "ðŸ‡·ðŸ‡´",
    "ru": "ðŸ‡·ðŸ‡º",
    "sm": None,
    "gd": None,
    "sr": "ðŸ‡·ðŸ‡¸",
    "st": "ðŸ‡±ðŸ‡¸",
    "sn": "ðŸ‡¿ðŸ‡¼",
    "sd": None,
    "si": "ðŸ‡±ðŸ‡°",
    "sk": "ðŸ‡¸ðŸ‡°",
    "sl": "ðŸ‡¸ðŸ‡®",
    "so": "ðŸ‡¸ðŸ‡´",
    "es": "ðŸ‡ªðŸ‡¸",
    "su": None,
    "sw": "ðŸ‡¸ðŸ‡¼",
    "sv": "ðŸ‡¸ðŸ‡ª",
    "tg": "ðŸ‡¹ðŸ‡¯",
    "ta": "ðŸ‡±ðŸ‡°",
    "te": "ðŸ‡®ðŸ‡³",
    "th": "ðŸ‡¹ðŸ‡­",
    "tr": "ðŸ‡¹ðŸ‡·",
    "uk": "ðŸ‡ºðŸ‡¦",
    "ur": "ðŸ‡µðŸ‡°",
    "ug": None,
    "uz": "ðŸ‡ºðŸ‡¿",
    "vi": "ðŸ‡»ðŸ‡³",
    "cy": "ðŸ‡¬ðŸ‡§",
    "xh": "ðŸ‡¿ðŸ‡¦",
    "yi": None,
    "yo": "ðŸ‡¾ðŸ‡´",
    "zu": "ðŸ‡¿ðŸ‡¦",
}


def get_lang_emoji(lang):
    """Get a country emoji from a language ISO 639-1 code."""
    return LANG2FLAG.get(lang)
